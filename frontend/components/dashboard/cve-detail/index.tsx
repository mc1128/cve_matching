"use client"

import { useCVE } from "@/lib/cve-context"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Button } from "@/components/ui/button"
import { ExternalLink, Star, AlertTriangle, Clock, Bot, CheckCircle, Loader2, X } from "lucide-react"
import { cn } from "@/lib/utils"
import { useState } from "react"
import { motion, AnimatePresence } from "framer-motion"

export default function CVEDetail() {
  const { selectedCVE, setSelectedCVE } = useCVE()
  const [isAnalyzing, setIsAnalyzing] = useState(false)
  const [analysisReport, setAnalysisReport] = useState<string | null>(null)
  const [analysisComplete, setAnalysisComplete] = useState(false)

  const handleRequestAnalysis = async () => {
    if (!selectedCVE) return

    setIsAnalyzing(true)
    setAnalysisComplete(false)

    // Simulate AI analysis process
    setTimeout(() => {
      const mockAnalysisReport = `
**Vulnerability Analysis Summary**

**Threat Level:** ${selectedCVE.severity}
**CVSS Score:** ${selectedCVE.cvss}/10.0

**Technical Analysis:**
This vulnerability affects ${selectedCVE.id} and poses a ${selectedCVE.severity.toLowerCase()} risk to affected systems. The vulnerability allows potential attackers to exploit weaknesses in the system architecture.

**Impact Assessment:**
- **Confidentiality:** High risk of data exposure
- **Integrity:** Potential for data manipulation
- **Availability:** Service disruption possible

**Recommended Actions:**
1. Apply security patches immediately
2. Monitor affected systems for suspicious activity
3. Implement additional access controls
4. Review system logs for potential exploitation attempts

**Priority:** ${selectedCVE.severity === "Critical" ? "IMMEDIATE" : selectedCVE.severity === "High" ? "HIGH" : "MEDIUM"}
      `.trim()

      setAnalysisReport(mockAnalysisReport)
      setIsAnalyzing(false)
      setAnalysisComplete(true)
    }, 3000)
  }

  const handleClose = () => {
    setSelectedCVE(null)
  }

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case "Critical":
        return "bg-red-500/20 text-red-400 border-red-500/30"
      case "High":
        return "bg-orange-500/20 text-orange-400 border-orange-500/30"
      case "Medium":
        return "bg-yellow-500/20 text-yellow-400 border-yellow-500/30"
      case "Low":
        return "bg-green-500/20 text-green-400 border-green-500/30"
      default:
        return "bg-gray-500/20 text-gray-400 border-gray-500/30"
    }
  }

  const getStatusColor = (status: string) => {
    switch (status) {
      case "Analysis Complete":
        return "bg-green-500/20 text-green-400 border-green-500/30"
      case "Analysis in Progress":
        return "bg-blue-500/20 text-blue-400 border-blue-500/30"
      case "Pending Analysis":
        return "bg-yellow-500/20 text-yellow-400 border-yellow-500/30"
      default:
        return "bg-gray-500/20 text-gray-400 border-gray-500/30"
    }
  }

  return (
    <AnimatePresence>
      {selectedCVE && (
        <>
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            className="fixed inset-0 bg-black/50 backdrop-blur-sm z-40"
            onClick={handleClose}
          />

          <motion.div
            initial={{ x: "100%" }}
            animate={{ x: 0 }}
            exit={{ x: "100%" }}
            transition={{ type: "spring", damping: 25, stiffness: 200 }}
            className="fixed right-0 top-0 h-full w-1/3 bg-background border-l border-border z-50 overflow-y-auto"
          >
            <div className="p-6 space-y-4">
              <div className="flex items-center justify-between mb-4">
                <h2 className="text-lg font-semibold">CVE Details</h2>
                <Button variant="ghost" size="sm" onClick={handleClose}>
                  <X className="h-4 w-4" />
                </Button>
              </div>

              <Card className="bg-card/50 backdrop-blur-sm border-border/50">
                <CardHeader className="pb-3">
                  <div className="flex items-start justify-between">
                    <div>
                      <CardTitle className="text-lg font-mono">{selectedCVE.id}</CardTitle>
                      <div className="flex items-center gap-2 mt-2">
                        <Badge className={cn("text-xs", getSeverityColor(selectedCVE.severity))}>
                          {selectedCVE.severity}
                        </Badge>
                        <Badge className={cn("text-xs", getStatusColor(selectedCVE.status))}>
                          {selectedCVE.status}
                        </Badge>
                        <div className="flex items-center gap-1 text-sm text-muted-foreground">
                          <span className="font-mono">CVSS:</span>
                          <span className="font-bold">{selectedCVE.cvss}</span>
                        </div>
                      </div>
                    </div>
                    <Button variant="ghost" size="sm">
                      <Star className="h-4 w-4" />
                    </Button>
                  </div>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div>
                    <h4 className="text-sm font-medium mb-2">Description</h4>
                    <p className="text-sm text-muted-foreground leading-relaxed">{selectedCVE.summary}</p>
                  </div>

                  <div className="grid grid-cols-2 gap-4 text-xs">
                    <div>
                      <span className="text-muted-foreground">Published:</span>
                      <p className="font-mono">{selectedCVE.publishedDate}</p>
                    </div>
                    <div>
                      <span className="text-muted-foreground">Modified:</span>
                      <p className="font-mono">{selectedCVE.lastModified}</p>
                    </div>
                  </div>
                </CardContent>
              </Card>

              {selectedCVE.aiAnalysis && (
                <Card className="bg-card/50 backdrop-blur-sm border-border/50">
                  <CardHeader className="pb-3">
                    <CardTitle className="text-sm flex items-center gap-2">
                      <AlertTriangle className="h-4 w-4" />
                      AI Risk Assessment
                    </CardTitle>
                  </CardHeader>
                  <CardContent className="space-y-3">
                    <div className="flex items-center gap-2">
                      <span className="text-xs text-muted-foreground">Risk Level:</span>
                      <Badge
                        className={cn(
                          "text-xs",
                          selectedCVE.aiAnalysis.riskLevel === "Critical"
                            ? "bg-red-500/20 text-red-400 border-red-500/30"
                            : selectedCVE.aiAnalysis.riskLevel === "Warning"
                              ? "bg-yellow-500/20 text-yellow-400 border-yellow-500/30"
                              : "bg-green-500/20 text-green-400 border-green-500/30",
                        )}
                      >
                        {selectedCVE.aiAnalysis.riskLevel}
                      </Badge>
                    </div>
                    <div>
                      <h5 className="text-xs font-medium mb-1">Recommendation</h5>
                      <p className="text-xs text-muted-foreground leading-relaxed">
                        {selectedCVE.aiAnalysis.recommendation}
                      </p>
                    </div>
                    {selectedCVE.aiAnalysis.affectedAssets.length > 0 && (
                      <div>
                        <h5 className="text-xs font-medium mb-1">Affected Assets</h5>
                        <div className="flex flex-wrap gap-1">
                          {selectedCVE.aiAnalysis.affectedAssets.map((asset, index) => (
                            <Badge key={index} variant="outline" className="text-xs">
                              {asset}
                            </Badge>
                          ))}
                        </div>
                      </div>
                    )}
                  </CardContent>
                </Card>
              )}

              {(isAnalyzing || analysisReport) && (
                <Card className="bg-card/50 backdrop-blur-sm border-border/50">
                  <CardHeader className="pb-3">
                    <CardTitle className="text-sm flex items-center gap-2">
                      <Bot className="h-4 w-4 text-blue-400" />
                      AI Analysis Report
                      {isAnalyzing && <Loader2 className="h-3 w-3 animate-spin text-blue-400" />}
                      {analysisComplete && <CheckCircle className="h-3 w-3 text-green-400" />}
                    </CardTitle>
                  </CardHeader>
                  <CardContent>
                    {isAnalyzing ? (
                      <div className="flex items-center justify-center py-8">
                        <div className="text-center space-y-3">
                          <Loader2 className="h-8 w-8 animate-spin mx-auto text-blue-400" />
                          <p className="text-sm text-muted-foreground">AI is analyzing CVE data...</p>
                          <div className="flex items-center justify-center gap-1">
                            <div className="w-2 h-2 bg-blue-400 rounded-full animate-pulse"></div>
                            <div className="w-2 h-2 bg-blue-400 rounded-full animate-pulse delay-100"></div>
                            <div className="w-2 h-2 bg-blue-400 rounded-full animate-pulse delay-200"></div>
                          </div>
                        </div>
                      </div>
                    ) : analysisReport ? (
                      <div className="space-y-3">
                        <div className="bg-muted/30 rounded-lg p-4 border border-border/50">
                          <pre className="text-xs text-muted-foreground whitespace-pre-wrap font-mono leading-relaxed">
                            {analysisReport}
                          </pre>
                        </div>
                        <div className="flex items-center gap-2 text-xs text-green-400">
                          <CheckCircle className="h-3 w-3" />
                          <span>Analysis completed successfully</span>
                        </div>
                      </div>
                    ) : null}
                  </CardContent>
                </Card>
              )}

              <Card className="bg-card/50 backdrop-blur-sm border-border/50">
                <CardHeader className="pb-3">
                  <CardTitle className="text-sm">References</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="space-y-2">
                    {selectedCVE.references.map((ref, index) => (
                      <a
                        key={index}
                        href={ref}
                        target="_blank"
                        rel="noopener noreferrer"
                        className="flex items-center gap-2 text-xs text-blue-400 hover:text-blue-300 transition-colors"
                      >
                        <ExternalLink className="h-3 w-3" />
                        <span className="truncate">{ref}</span>
                      </a>
                    ))}
                  </div>
                </CardContent>
              </Card>

              {selectedCVE.cpe.length > 0 && (
                <Card className="bg-card/50 backdrop-blur-sm border-border/50">
                  <CardHeader className="pb-3">
                    <CardTitle className="text-sm">Related CPE</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-1">
                      {selectedCVE.cpe.map((cpe, index) => (
                        <code key={index} className="block text-xs bg-muted/50 p-2 rounded font-mono">
                          {cpe}
                        </code>
                      ))}
                    </div>
                  </CardContent>
                </Card>
              )}

              <div className="flex gap-2">
                <Button size="sm" className="flex-1" onClick={handleRequestAnalysis} disabled={isAnalyzing}>
                  {isAnalyzing ? (
                    <>
                      <Loader2 className="h-4 w-4 mr-2 animate-spin" />
                      Analyzing...
                    </>
                  ) : (
                    <>
                      <Clock className="h-4 w-4 mr-2" />
                      Request Analysis
                    </>
                  )}
                </Button>
              </div>
            </div>
          </motion.div>
        </>
      )}
    </AnimatePresence>
  )
}
